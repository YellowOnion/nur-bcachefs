From 2f612dd7d9140add7117b0ceaec477b2ed573994 Mon Sep 17 00:00:00 2001
From: Daniel Hill <daniel@gluo.nz>
Date: Mon, 9 Jan 2023 01:49:42 +1300
Subject: [PATCH 1/2] bcachefs: add tracepoint for bch2_alloc_sectors_trans()

Signed-off-by: Daniel Hill <daniel@gluo.nz>
---
 fs/bcachefs/alloc_foreground.c  | 31 ++++++++++++++++++++++++++++++-
 include/trace/events/bcachefs.h | 13 +++++++++++++
 2 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/fs/bcachefs/alloc_foreground.c b/fs/bcachefs/alloc_foreground.c
index badf1075c9bf..de48c58a1f0e 100644
--- a/fs/bcachefs/alloc_foreground.c
+++ b/fs/bcachefs/alloc_foreground.c
@@ -1129,7 +1129,7 @@ static struct write_point *writepoint_find(struct btree_trans *trans,
 /*
  * Get us an open_bucket we can allocate from, return with it locked:
  */
-struct write_point *bch2_alloc_sectors_start_trans(struct btree_trans *trans,
+struct write_point *__bch2_alloc_sectors_start_trans(struct btree_trans *trans,
 				unsigned target,
 				unsigned erasure_code,
 				struct write_point_specifier write_point,
@@ -1240,7 +1240,36 @@ struct write_point *bch2_alloc_sectors_start_trans(struct btree_trans *trans,
 
 	return ERR_PTR(ret);
 }
+struct write_point *bch2_alloc_sectors_start_trans(struct btree_trans *trans,
+				unsigned target,
+				unsigned erasure_code,
+				struct write_point_specifier write_point,
+				struct bch_devs_list *devs_have,
+				unsigned nr_replicas,
+				unsigned nr_replicas_required,
+				enum alloc_reserve reserve,
+				unsigned flags,
+				struct closure *cl)
+{
+	struct write_point *wp;
+	int ret;
 
+	wp = __bch2_alloc_sectors_start_trans(trans,
+					      target,
+					      erasure_code,
+					      write_point,
+					      devs_have,
+					      nr_replicas,
+					      nr_replicas_required,
+					      reserve,
+					      flags,
+					      cl);
+	ret = PTR_ERR_OR_ZERO(wp);
+
+	trace_alloc_sector_trans(trans->c, bch2_err_str(ret), bch2_err_matches(ret, BCH_ERR_transaction_restart));
+
+	return wp;
+}
 struct bch_extent_ptr bch2_ob_ptr(struct bch_fs *c, struct open_bucket *ob)
 {
 	struct bch_dev *ca = bch_dev_bkey_exists(c, ob->dev);
diff --git a/include/trace/events/bcachefs.h b/include/trace/events/bcachefs.h
index 3fb658fa77ad..50dc6321e7c1 100644
--- a/include/trace/events/bcachefs.h
+++ b/include/trace/events/bcachefs.h
@@ -656,6 +656,19 @@ TRACE_EVENT(bucket_invalidate,
 		  __entry->sectors)
 );
 
+TRACE_EVENT(alloc_sector_trans,
+	TP_PROTO(struct bch_fs *c, const char *err, bool restart),
+	TP_ARGS(c, err, restart),
+	TP_STRUCT__entry(
+		    __array(char, err, 32)
+		    __field(bool, restart)
+	),
+	TP_fast_assign(
+		    strscpy(__entry->err, err, sizeof(__entry->err));
+		    __entry->restart = restart;
+	),
+	TP_printk("err %s restart %s", __entry->err, __entry->restart ? "true" : "false")
+);
 /* Moving IO */
 
 DEFINE_EVENT(bkey, move_extent_read,
-- 
2.37.2


From e9b17f6424c89dd3dd7fb6e8edeebb9ece3194b4 Mon Sep 17 00:00:00 2001
From: Daniel Hill <daniel@gluo.nz>
Date: Tue, 10 Jan 2023 00:20:06 +1300
Subject: [PATCH 2/2] bcachefs: FIX FOR PANIC IN REFLINK STUFF.

Signed-off-by: Daniel Hill <daniel@gluo.nz>
---
 fs/bcachefs/reflink.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/fs/bcachefs/reflink.c b/fs/bcachefs/reflink.c
index 37ab38dd67eb..d600ee952a9b 100644
--- a/fs/bcachefs/reflink.c
+++ b/fs/bcachefs/reflink.c
@@ -189,7 +189,7 @@ static int bch2_make_extent_indirect(struct btree_trans *trans,
 
 	for_each_btree_key_norestart(trans, reflink_iter, BTREE_ID_reflink,
 			   POS(0, c->reflink_hint),
-			   BTREE_ITER_INTENT|BTREE_ITER_SLOTS, k, ret) {
+			   BTREE_ITER_SLOTS, k, ret) {
 		if (reflink_iter.pos.inode) {
 			bch2_btree_iter_set_pos(&reflink_iter, POS_MIN);
 			continue;
-- 
2.37.2

